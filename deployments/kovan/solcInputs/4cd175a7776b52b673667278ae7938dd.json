{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IEscrow {\r\n    function redeem() external;\r\n    function redeemAll() external;\r\n    function mint(address _to, uint _amount) external returns (bool);\r\n}"
    },
    "contracts/OhStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./interfaces/IEscrow.sol\";\r\n\r\ncontract OhStaking is ERC20, Ownable, ReentrancyGuard {\r\n    IERC20 public token;\r\n    IEscrow public escrow;\r\n\r\n    bool public isKilled = false;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public rewardsDuration = 0;\r\n    uint256 public claimedRewards;\r\n    uint256 public startRewardsTime;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public lastRewardTimestamp;\r\n    uint256 public rewardPerTokenStored;\r\n    uint256 public maxBonus;\r\n    uint256 public maxLockDuration;\r\n\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => Deposit) public deposits;\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint64 start;\r\n        uint64 end;\r\n    }\r\n\r\n    event Staked(address indexed user, uint256 amountStaked);\r\n    event Unstaked(address indexed user, uint256 amountUnstaked);\r\n    event RewardsClaimed(address indexed user, uint256 rewardsClaimed);\r\n    event RewardAmountSet(uint256 rewardRate, uint256 duration);\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _token,\r\n        address _escrow,\r\n        uint256 _maxBonus,\r\n        uint256 _maxLockDuration,\r\n        uint256 _startRewards\r\n    ) ERC20(name, symbol) {\r\n        token = IERC20(_token);\r\n        escrow = IEscrow(_escrow);\r\n        maxBonus = _maxBonus;\r\n        maxLockDuration = _maxLockDuration;\r\n        startRewardsTime = block.timestamp + _startRewards;\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        uint256 updatedRewardPerToken = rewardPerToken();\r\n        rewardPerTokenStored = updatedRewardPerToken;\r\n        lastUpdateTime = rewardTimestamp();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = updatedRewardPerToken;\r\n        }\r\n        _;\r\n    }\r\n\r\n    // external functions\r\n\r\n    function stake(uint256 _amount, uint256 _duration) external nonReentrant {\r\n        _stake(msg.sender, _amount, _duration);\r\n    }\r\n\r\n    function unstake(uint256 _amount) external nonReentrant {\r\n        _unstake(msg.sender, _amount);\r\n    }\r\n\r\n    function claim() external nonReentrant updateReward(msg.sender) {\r\n        _claim(msg.sender);\r\n    }\r\n\r\n    function exit() external nonReentrant {\r\n        _unstake(msg.sender, deposits[msg.sender].amount);\r\n        _claim(msg.sender);\r\n    }\r\n\r\n    // Exit without updating reward values, forfeits all rewards\r\n    function emergencyExit() external nonReentrant {\r\n        uint256 amount = deposits[msg.sender].amount;\r\n        uint256 start = deposits[msg.sender].start;\r\n        uint256 end = deposits[msg.sender].end;\r\n\r\n        require(amount > 0, \"No tokens to withdraw\");\r\n\r\n        // require lock has ended if contract has not been killed\r\n        if (!isKilled) {\r\n            require(end < block.timestamp, \"Tokens still locked\");\r\n        }\r\n\r\n        // calculate burn amount\r\n        uint256 burnAmount = (amount * getMultiplier(end - start)) / 1e18;\r\n\r\n        // update user deposit and rewards to 0\r\n        deposits[msg.sender].amount = 0;\r\n        deposits[msg.sender].start = 0;\r\n        deposits[msg.sender].end = 0;\r\n        rewards[msg.sender] = 0;\r\n        userRewardPerTokenPaid[msg.sender] = 0;\r\n\r\n        _burn(msg.sender, burnAmount);\r\n        require(token.transfer(msg.sender, amount), \"Token transfer failed\");\r\n        emit Unstaked(msg.sender, amount);\r\n    }\r\n\r\n    //owner only functions\r\n\r\n    function setRewardAmount(uint256 reward, uint256 _rewardsDuration) external onlyOwner updateReward(address(0)) {\r\n        rewardsDuration = _rewardsDuration;\r\n        rewardRate = reward / rewardsDuration;\r\n\r\n        lastUpdateTime = block.timestamp;\r\n        if (block.timestamp < startRewardsTime) {\r\n            lastRewardTimestamp = startRewardsTime + rewardsDuration;\r\n        } else {\r\n            lastRewardTimestamp = block.timestamp + rewardsDuration;\r\n        }\r\n        emit RewardAmountSet(rewardRate, _rewardsDuration);\r\n    }\r\n\r\n    function kill() external onlyOwner {\r\n        require(!isKilled, \"Pool already killed\");\r\n        isKilled = true;\r\n    }\r\n\r\n    // public views\r\n\r\n    function getMultiplier(uint256 duration) public view returns (uint256) {\r\n        if (duration == 0) {\r\n            return 1e18;\r\n        }\r\n        return 1e18 + ((maxBonus * duration) / maxLockDuration);\r\n    }\r\n\r\n    function totalClaimed() public view returns (uint256) {\r\n        return claimedRewards;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalSupply() == 0 || block.timestamp < startRewardsTime) {\r\n            return 0;\r\n        }\r\n        return rewardPerTokenStored + (((rewardRate * (rewardTimestamp() - startTimestamp()) * 1e18) / totalSupply()));\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        return ((balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) + rewards[account];\r\n    }\r\n\r\n    // internal views\r\n\r\n    // function to check if staking rewards have ended\r\n    function rewardTimestamp() internal view returns (uint256) {\r\n        if (block.timestamp < lastRewardTimestamp) {\r\n            return block.timestamp;\r\n        } else {\r\n            return lastRewardTimestamp;\r\n        }\r\n    }\r\n\r\n    // function to check if staking rewards have started\r\n    function startTimestamp() internal view returns (uint256) {\r\n        if (startRewardsTime > lastUpdateTime) {\r\n            return startRewardsTime;\r\n        } else {\r\n            return lastUpdateTime;\r\n        }\r\n    }\r\n\r\n    // internal functions\r\n\r\n    function _stake(\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256 _duration\r\n    ) internal updateReward(_user) {\r\n        require(_amount > 0, \"Must stake > 0 tokens\");\r\n        require(_duration <= maxLockDuration, \"Lock exceeds max duration\");\r\n        require(!isKilled, \"Contract has been killed\");\r\n\r\n        uint256 balance = deposits[_user].amount;\r\n        uint256 start = deposits[_user].start;\r\n        uint256 end = deposits[_user].end;\r\n\r\n        // require new locks to exceed past lock duration\r\n        require(_duration >= end - start, \"Must exceed current lock\");\r\n\r\n        // calculate mint amount, account for previous deposits\r\n        uint256 mintAmount = (((balance + _amount) * getMultiplier(_duration)) / 1e18) - balanceOf(_user);\r\n\r\n        // update user deposit\r\n        deposits[_user].amount = balance + _amount;\r\n        deposits[_user].start = uint64(block.timestamp);\r\n        deposits[_user].end = uint64(block.timestamp + _duration);\r\n\r\n        // transfer and mint\r\n        require(token.transferFrom(_user, address(this), _amount), \"Token transfer failed\");\r\n        _mint(_user, mintAmount);\r\n        emit Staked(_user, _amount);\r\n    }\r\n\r\n    function _unstake(address _user, uint256 _amount) internal updateReward(_user) {\r\n        require(_amount > 0, \"Must withdraw > 0 tokens\");\r\n\r\n        uint256 balance = deposits[_user].amount;\r\n        uint256 start = deposits[_user].start;\r\n        uint256 end = deposits[_user].end;\r\n\r\n        // require lock has ended if contract has not been killed\r\n        if (!isKilled) {\r\n            require(end < block.timestamp, \"Tokens still locked\");\r\n        }\r\n\r\n        // calculate burn amount\r\n        uint256 burnAmount = (_amount * getMultiplier(end - start)) / 1e18;\r\n\r\n        // update user deposit\r\n        deposits[_user].amount = balance - _amount;\r\n        if (balance - _amount == 0) {\r\n            deposits[_user].start = 0;\r\n            deposits[_user].end = 0;\r\n        }\r\n\r\n        // burn and transfer\r\n        _burn(_user, burnAmount);\r\n        require(token.transfer(_user, _amount), \"Token transfer failed\");\r\n        emit Unstaked(_user, _amount);\r\n    }\r\n\r\n    function _claim(address _user) internal {\r\n        uint256 reward = rewards[_user];\r\n        if (reward > 0) {\r\n            rewards[_user] = 0;\r\n            claimedRewards += reward;\r\n            require(escrow.mint(_user, reward), \"Token transfer failed\");\r\n            emit RewardsClaimed(_user, reward);\r\n        }\r\n    }\r\n\r\n    // overrides\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal override {\r\n        uint256 end = deposits[_from].end;\r\n        if (end > 0) {\r\n            uint256 balance = deposits[_from].amount;\r\n            uint256 start = deposits[_from].start;\r\n\r\n            // calculate equivalent deposited amount\r\n            uint256 depositAmount = balance / (getMultiplier(end - start) / 1e18);\r\n\r\n            // update from deposits\r\n            deposits[_from].amount = balance - depositAmount;\r\n            if (balance - depositAmount == 0) {\r\n                deposits[_from].start = 0;\r\n                deposits[_from].end = 0;\r\n            }\r\n\r\n            // update to deposits\r\n            deposits[_to].amount = depositAmount;\r\n            deposits[_to].start = uint64(start);\r\n            deposits[_to].end = uint64(end);\r\n        }\r\n\r\n        super._transfer(_from, _to, _amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/OhEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract OhEscrow is ERC20, Ownable, ReentrancyGuard {\r\n    IERC20 public token;\r\n\r\n    address public treasury;\r\n\r\n    uint256 public escrowDuration;\r\n    uint256 public redeemedRewards;\r\n\r\n    mapping(address => bool) public minters;\r\n    mapping(address => uint64) public counter;\r\n    mapping(address => Lock[]) public locks;\r\n\r\n    struct Lock {\r\n        uint256 amount;\r\n        uint64 end;\r\n    }\r\n\r\n    event Redeemed(address indexed user, uint256 amount);\r\n    event MinterUpdated(address indexed minter, bool approved);\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _token,\r\n        address _treasury,\r\n        uint256 _escrowDuration\r\n    ) ERC20(name, symbol) {\r\n        token = IERC20(_token);\r\n        treasury = _treasury;\r\n        escrowDuration = _escrowDuration;\r\n    }\r\n\r\n    // external functions\r\n\r\n    // redeem single escrow lock rewards, included for edge cases w/ too many locks for EVM to handle\r\n    function redeem() external nonReentrant {\r\n        uint256 length = locks[msg.sender].length;\r\n        uint256 lockCounter = counter[msg.sender];\r\n        require(length > lockCounter, \"All tokens redeemed\");\r\n        require(locks[msg.sender][lockCounter].end < block.timestamp, \"Tokens still locked\");\r\n\r\n        uint256 redeemAmount = locks[msg.sender][lockCounter].amount;\r\n\r\n        // ensure any transfers are accounted for\r\n        uint256 balance = balanceOf(msg.sender);\r\n        if (redeemAmount > balance) {\r\n            redeemAmount = balance;\r\n        }\r\n\r\n        // update counter and rewards\r\n        counter[msg.sender] = uint64(lockCounter + 1);\r\n        redeemedRewards += redeemAmount;\r\n\r\n        // burn escrow and transfer rewards\r\n        _burn(msg.sender, redeemAmount);\r\n        require(token.transferFrom(treasury, msg.sender, redeemAmount), \"Token transfer failed\");\r\n        emit Redeemed(msg.sender, redeemAmount);\r\n    }\r\n\r\n    // redeem all available escrow rewards\r\n    function redeemAll() external nonReentrant {\r\n        uint256 length = locks[msg.sender].length;\r\n        uint256 lockCounter = counter[msg.sender];\r\n        require(length > lockCounter, \"All tokens redeemed\");\r\n\r\n        // find amount to redeem\r\n        uint256 redeemAmount;\r\n        uint256 redeemCount;\r\n        for (uint256 i = lockCounter; i < length; i++) {\r\n            if (locks[msg.sender][i].end < block.timestamp) {\r\n                redeemAmount += locks[msg.sender][i].amount;\r\n                redeemCount += 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // revert if no rewards\r\n        require(redeemAmount > 0, \"No tokens to redeem\");\r\n\r\n        // ensure any transfers are accounted for\r\n        uint256 balance = balanceOf(msg.sender);\r\n        if (redeemAmount > balance) {\r\n            redeemAmount = balance;\r\n        }\r\n\r\n        // update counter and rewards\r\n        counter[msg.sender] = uint64(lockCounter + redeemCount);\r\n        redeemedRewards += redeemAmount;\r\n\r\n        // burn escrow and transfer rewards\r\n        _burn(msg.sender, redeemAmount);\r\n        require(token.transferFrom(treasury, msg.sender, redeemAmount), \"Token transfer failed\");\r\n        emit Redeemed(msg.sender, redeemAmount);\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external returns (bool) {\r\n        require(minters[msg.sender], \"Minting permissions denied\");\r\n\r\n        // create a new lock\r\n        locks[_to].push(Lock({amount: _amount, end: uint64(block.timestamp + escrowDuration)}));\r\n\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // public views\r\n\r\n    function vested(address _user) public view returns (uint256 rewards) {\r\n        uint256 length = locks[_user].length;\r\n        uint256 lockCounter = counter[_user];\r\n\r\n        for (uint256 i = lockCounter; i < length; i++) {\r\n            if (locks[_user][i].end < block.timestamp) {\r\n                rewards += locks[_user][i].amount;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // overrides\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal override {\r\n        // push lock with new vesting period to recipient\r\n        locks[_to].push(Lock({amount: _amount, end: uint64(block.timestamp + escrowDuration)}));\r\n\r\n        super._transfer(_from, _to, _amount);\r\n    }\r\n\r\n    // owner functions\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setMinter(address _minter) external onlyOwner {\r\n        bool approved = minters[_minter];\r\n        minters[_minter] = !approved;\r\n        emit MinterUpdated(_minter, !approved);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}