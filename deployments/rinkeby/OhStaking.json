{
  "address": "0x7FF90B726Cd46df5bCD43d0871d870F691126B00",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBonus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxLockDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "RewardAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsClaimed",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUnstaked",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "start",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "end",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startRewardsTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4c0260fa9d345a7747c958dd2023d04c98843d02196e3d32bf95e93425df654",
  "receipt": {
    "to": null,
    "from": "0x123456D302B690f8525B4BAC5681101d706e850e",
    "contractAddress": "0x7FF90B726Cd46df5bCD43d0871d870F691126B00",
    "transactionIndex": 24,
    "gasUsed": "1885387",
    "logsBloom": "0x
    "blockHash": "0xdbe0af8e41d14a563d1766f0947f4145645222af3ce6542439eb3e42a636fa4e",
    "transactionHash": "0xd4c0260fa9d345a7747c958dd2023d04c98843d02196e3d32bf95e93425df654",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 9779840,
        "transactionHash": "0xd4c0260fa9d345a7747c958dd2023d04c98843d02196e3d32bf95e93425df654",
        "address": "0x7FF90B726Cd46df5bCD43d0871d870F691126B00",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000123456d302b690f8525b4bac5681101d706e850e"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xdbe0af8e41d14a563d1766f0947f4145645222af3ce6542439eb3e42a636fa4e"
      }
    ],
    "blockNumber": 9779840,
    "cumulativeGasUsed": "6297436",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Staked Oh! Finance",
    "SOH",
    "0x6b461A994d76d8248a6B439D4a19cDfd821409eE",
    "0x7f4C2431B4dB2ce9ee2f994064A8840BA614bceC",
    "2000000000000000000",
    3600,
    1638987559
  ],
  "solcInputHash": "1f18ffbef8daf75cd496eba588384830",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRewardsTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OhStaking.sol\":\"OhStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/OhStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interfaces/IEscrow.sol\\\";\\r\\n\\r\\ncontract OhStaking is ERC20, Ownable, ReentrancyGuard {\\r\\n    IERC20 public token;\\r\\n    IEscrow public escrow;\\r\\n\\r\\n    uint256 public rewardRate = 0;\\r\\n    uint256 public rewardsDuration = 0;\\r\\n    uint256 public claimedRewards;\\r\\n    uint256 public startRewardsTime;\\r\\n    uint256 public lastUpdateTime;\\r\\n    uint256 public lastRewardTimestamp;\\r\\n    uint256 public rewardPerTokenStored;\\r\\n    uint256 public maxBonus;\\r\\n    uint256 public maxLockDuration;\\r\\n\\r\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n    mapping(address => uint256) public rewards;\\r\\n    mapping(address => Deposit) public deposits;\\r\\n\\r\\n    struct Deposit {\\r\\n        uint256 amount;\\r\\n        uint64 start;\\r\\n        uint64 end;\\r\\n    }\\r\\n\\r\\n    event Staked(address indexed user, uint256 amountStaked);\\r\\n    event Unstaked(address indexed user, uint256 amountUnstaked);\\r\\n    event RewardsClaimed(address indexed user, uint256 rewardsClaimed);\\r\\n    event RewardAmountSet(uint256 rewardRate, uint256 duration);\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address _token,\\r\\n        address _escrow,\\r\\n        uint256 _maxBonus,\\r\\n        uint256 _maxLockDuration,\\r\\n        uint256 _startRewards\\r\\n    ) ERC20(name, symbol) {\\r\\n        token = IERC20(_token);\\r\\n        escrow = IEscrow(_escrow);\\r\\n        maxBonus = _maxBonus;\\r\\n        maxLockDuration = _maxLockDuration;\\r\\n        startRewardsTime = _startRewards;\\r\\n    }\\r\\n\\r\\n    modifier updateReward(address account) {\\r\\n        uint256 updatedRewardPerToken = rewardPerToken();\\r\\n        rewardPerTokenStored = updatedRewardPerToken;\\r\\n        lastUpdateTime = rewardTimestamp();\\r\\n        if (account != address(0)) {\\r\\n            rewards[account] = earned(account);\\r\\n            userRewardPerTokenPaid[account] = updatedRewardPerToken;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // external functions\\r\\n\\r\\n    function stake(uint256 _amount, uint256 _duration) external nonReentrant {\\r\\n        _stake(msg.sender, _amount, _duration);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _amount) external nonReentrant {\\r\\n        _unstake(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function claim() external nonReentrant updateReward(msg.sender) {\\r\\n        _claim(msg.sender);\\r\\n    }\\r\\n\\r\\n    function exit() external nonReentrant {\\r\\n        _unstake(msg.sender, balanceOf(msg.sender));\\r\\n        _claim(msg.sender);\\r\\n    }\\r\\n\\r\\n    // public views\\r\\n\\r\\n    function getMultiplier(uint256 duration) public view returns (uint256) {\\r\\n        if (duration == 0) {\\r\\n            return 1e18;\\r\\n        }\\r\\n        return 1e18 + ((maxBonus * duration) / maxLockDuration);\\r\\n    }\\r\\n\\r\\n    function totalClaimed() public view returns (uint256) {\\r\\n        return claimedRewards;\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (totalSupply() == 0 || block.timestamp < startRewardsTime) {\\r\\n            return 0;\\r\\n        }\\r\\n        return rewardPerTokenStored + (((rewardRate * (rewardTimestamp() - startTimestamp()) * 1e18) / totalSupply()));\\r\\n    }\\r\\n\\r\\n    function earned(address account) public view returns (uint256) {\\r\\n        return ((balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) + rewards[account];\\r\\n    }\\r\\n\\r\\n    // internal views\\r\\n\\r\\n    // function to check if staking rewards have ended\\r\\n    function rewardTimestamp() internal view returns (uint256) {\\r\\n        if (block.timestamp < lastRewardTimestamp) {\\r\\n            return block.timestamp;\\r\\n        } else {\\r\\n            return lastRewardTimestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function to check if staking rewards have started\\r\\n    function startTimestamp() internal view returns (uint256) {\\r\\n        if (startRewardsTime > lastUpdateTime) {\\r\\n            return startRewardsTime;\\r\\n        } else {\\r\\n            return lastUpdateTime;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // internal functions\\r\\n\\r\\n    function _stake(\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) internal updateReward(_user) {\\r\\n        require(_amount > 0, \\\"Must stake > 0 tokens\\\");\\r\\n        require(_duration <= maxLockDuration, \\\"Lock exceeds max duration\\\");\\r\\n\\r\\n        uint256 balance = deposits[_user].amount;\\r\\n        uint256 start = deposits[_user].start;\\r\\n        uint256 end = deposits[_user].end;\\r\\n\\r\\n        // require new locks to exceed past lock duration\\r\\n        require(_duration >= end - start, \\\"Must exceed current lock\\\");\\r\\n\\r\\n        // calculate mint amount, account for previous deposits\\r\\n        uint256 mintAmount = (((balance + _amount) * getMultiplier(_duration)) / 1e18) - balance;\\r\\n\\r\\n        // update user deposit\\r\\n        deposits[_user].amount = balance + _amount;\\r\\n        deposits[_user].start = uint64(block.timestamp);\\r\\n        deposits[_user].end = uint64(block.timestamp + _duration);\\r\\n\\r\\n        // transfer and mint\\r\\n        require(token.transferFrom(_user, address(this), _amount), \\\"Token transfer failed\\\");\\r\\n        _mint(_user, mintAmount);\\r\\n        emit Staked(_user, _amount);\\r\\n    }\\r\\n\\r\\n    function _unstake(address _user, uint256 _amount) internal updateReward(_user) {\\r\\n        require(_amount > 0, \\\"Must withdraw > 0 tokens\\\");\\r\\n\\r\\n        uint256 balance = deposits[_user].amount;\\r\\n        uint256 start = deposits[_user].start;\\r\\n        uint256 end = deposits[_user].end;\\r\\n\\r\\n        // require lock has ended\\r\\n        require(end < block.timestamp, \\\"Tokens still locked\\\");\\r\\n\\r\\n        // calculate burn amount\\r\\n        uint256 burnAmount = (_amount * getMultiplier(end - start)) / 1e18;\\r\\n\\r\\n        // update user deposit\\r\\n        deposits[_user].amount = balance - _amount;\\r\\n        if (balance - _amount == 0) {\\r\\n            deposits[_user].start = 0;\\r\\n            deposits[_user].end = 0;\\r\\n        }\\r\\n\\r\\n        // burn and transfer\\r\\n        _burn(_user, burnAmount);\\r\\n        require(token.transfer(_user, _amount), \\\"Token transfer failed\\\");\\r\\n        emit Unstaked(_user, _amount);\\r\\n    }\\r\\n\\r\\n    function _claim(address _user) internal {\\r\\n        uint256 reward = rewards[_user];\\r\\n        if (reward > 0) {\\r\\n            rewards[_user] = 0;\\r\\n            claimedRewards += reward;\\r\\n            require(escrow.mint(_user, reward), \\\"Token transfer failed\\\");\\r\\n            emit RewardsClaimed(_user, reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // overrides\\r\\n\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        uint256 end = deposits[_from].end;\\r\\n        if (end > 0) {\\r\\n            uint256 balance = deposits[_from].amount;\\r\\n            uint256 start = deposits[_from].start;\\r\\n\\r\\n            // calculate equivalent deposited amount\\r\\n            uint256 depositAmount = balance / (getMultiplier(end - start) / 1e18);\\r\\n\\r\\n            // update from deposits\\r\\n            deposits[_from].amount = balance - depositAmount;\\r\\n            if (balance - depositAmount == 0) {\\r\\n                deposits[_from].start = 0;\\r\\n                deposits[_from].end = 0;\\r\\n            }\\r\\n\\r\\n            // update to deposits\\r\\n            deposits[_to].amount = depositAmount;\\r\\n            deposits[_to].start = uint64(start);\\r\\n            deposits[_to].end = uint64(end);\\r\\n        }\\r\\n\\r\\n        super._transfer(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    //owner only functions\\r\\n\\r\\n    function setRewardAmount(uint256 reward, uint256 _rewardsDuration) external onlyOwner updateReward(address(0)) {\\r\\n        rewardsDuration = _rewardsDuration;\\r\\n        rewardRate = reward / rewardsDuration;\\r\\n\\r\\n        lastUpdateTime = block.timestamp;\\r\\n        if (block.timestamp < startRewardsTime) {\\r\\n            lastRewardTimestamp = startRewardsTime + rewardsDuration;\\r\\n        } else {\\r\\n            lastRewardTimestamp = block.timestamp + rewardsDuration;\\r\\n        }\\r\\n        emit RewardAmountSet(rewardRate, _rewardsDuration);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbd02f3f7659b53d62d6eb071cc2fefc29e5f39b4c9ae571f84d6316fdaad4336\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IEscrow {\\r\\n    function redeem() external;\\r\\n    function redeemAll() external;\\r\\n    function mint(address _to, uint _amount) external returns (bool);\\r\\n}\",\"keccak256\":\"0xd40e738e2e8f6452f212bc92ef1b97a889df803879fc9870a04691a8bb36c05d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006009556000600a553480156200001b57600080fd5b50604051620020cc380380620020cc8339810160408190526200003e91620002a4565b865187908790620000579060039060208501906200012a565b5080516200006d9060049060208401906200012a565b5050506200008a62000084620000d460201b60201c565b620000d8565b6001600655600780546001600160a01b039687166001600160a01b0319918216179091556008805495909616941693909317909355601055601191909155600c5550620003a39050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001389062000350565b90600052602060002090601f0160209004810192826200015c5760008555620001a7565b82601f106200017757805160ff1916838001178555620001a7565b82800160010185558215620001a7579182015b82811115620001a75782518255916020019190600101906200018a565b50620001b5929150620001b9565b5090565b5b80821115620001b55760008155600101620001ba565b80516001600160a01b0381168114620001e857600080fd5b919050565b600082601f830112620001ff57600080fd5b81516001600160401b03808211156200021c576200021c6200038d565b604051601f8301601f19908116603f011681019082821181831017156200024757620002476200038d565b816040528381526020925086838588010111156200026457600080fd5b600091505b8382101562000288578582018301518183018401529082019062000269565b838211156200029a5760008385830101525b9695505050505050565b600080600080600080600060e0888a031215620002c057600080fd5b87516001600160401b0380821115620002d857600080fd5b620002e68b838c01620001ed565b985060208a0151915080821115620002fd57600080fd5b506200030c8a828b01620001ed565b9650506200031d60408901620001d0565b94506200032d60608901620001d0565b93506080880151925060a0880151915060c0880151905092959891949750929550565b600181811c908216806200036557607f821691505b602082108114156200038757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611d1980620003b36000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c80637b0a47ee11610130578063cd3daf9d116100b8578063e9fad8ee1161007c578063e9fad8ee14610484578063f2fde38b1461048c578063f8077fae1461049f578063fc0c546a146104a8578063fc7e286d146104bb57600080fd5b8063cd3daf9d1461041f578063d54ad2a114610427578063dd62ed3e1461042f578063df136d6514610468578063e2fdcc171461047157600080fd5b8063a16cdbb1116100ff578063a16cdbb1146103d4578063a457c2d7146103dd578063a9059cbb146103f0578063adf8252d14610403578063c8f33c911461041657600080fd5b80637b0a47ee1461037e5780638b876347146103875780638da5cb5b146103a757806395d89b41146103cc57600080fd5b8063313ce567116101b35780635359b3ea116101825780635359b3ea1461031e57806354c5b6961461033157806370a082311461033a578063715018a6146103635780637b0472f01461036b57600080fd5b8063313ce567146102eb578063386a9525146102fa57806339509351146103035780634e71d92d1461031657600080fd5b806318160ddd116101fa57806318160ddd146102a957806322e9c08d146102b157806323b80449146102ba57806323b872dd146102c35780632e17de78146102d657600080fd5b80628cc2621461022b57806306fdde03146102515780630700037d14610266578063095ea7b314610286575b600080fd5b61023e610239366004611a1a565b61051d565b6040519081526020015b60405180910390f35b61025961059a565b6040516102489190611b32565b61023e610274366004611a1a565b60136020526000908152604090205481565b610299610294366004611aab565b61062c565b6040519015158152602001610248565b60025461023e565b61023e600b5481565b61023e600c5481565b6102996102d1366004611a6f565b610642565b6102e96102e4366004611af7565b6106f1565b005b60405160128152602001610248565b61023e600a5481565b610299610311366004611aab565b61072b565b6102e9610767565b6102e961032c366004611b10565b6107fe565b61023e60105481565b61023e610348366004611a1a565b6001600160a01b031660009081526020819052604090205490565b6102e9610911565b6102e9610379366004611b10565b610947565b61023e60095481565b61023e610395366004611a1a565b60126020526000908152604090205481565b6005546001600160a01b03165b6040516001600160a01b039091168152602001610248565b61025961097a565b61023e60115481565b6102996103eb366004611aab565b610989565b6102996103fe366004611aab565b610a22565b61023e610411366004611af7565b610a2f565b61023e600d5481565b61023e610a72565b600b5461023e565b61023e61043d366004611a3c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61023e600f5481565b6008546103b4906001600160a01b031681565b6102e9610aed565b6102e961049a366004611a1a565b610b3f565b61023e600e5481565b6007546103b4906001600160a01b031681565b6104f76104c9366004611a1a565b6014602052600090815260409020805460019091015467ffffffffffffffff80821691600160401b90041683565b6040805193845267ffffffffffffffff9283166020850152911690820152606001610248565b6001600160a01b0381166000908152601360209081526040808320546012909252822054670de0b6b3a764000090610553610a72565b61055d9190611c7b565b6001600160a01b0385166000908152602081905260409020546105809190611c5c565b61058a9190611c3a565b6105949190611c22565b92915050565b6060600380546105a990611c92565b80601f01602080910402602001604051908101604052809291908181526020018280546105d590611c92565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b6000610639338484610bda565b50600192915050565b600061064f848484610cff565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106d95760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6106e68533858403610bda565b506001949350505050565b600260065414156107145760405162461bcd60e51b81526004016106d090611beb565b60026006556107233382610e45565b506001600655565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610639918590610762908690611c22565b610bda565b6002600654141561078a5760405162461bcd60e51b81526004016106d090611beb565b600260065533600061079a610a72565b600f81905590506107a96110ee565b600d556001600160a01b038216156107ec576107c48261051d565b6001600160a01b03831660009081526013602090815260408083209390935560129052208190555b6107f533611106565b50506001600655565b6005546001600160a01b031633146108285760405162461bcd60e51b81526004016106d090611bb6565b600080610833610a72565b600f81905590506108426110ee565b600d556001600160a01b038216156108855761085d8261051d565b6001600160a01b03831660009081526013602090815260408083209390935560129052208190555b600a8390556108948385611c3a565b60095542600d819055600c5411156108be57600a54600c546108b69190611c22565b600e556108cf565b600a546108cb9042611c22565b600e555b60095460408051918252602082018590527f53ec5ac14ec827c0859f27c3d22f4ea8c29f6d64cbe2f92aeb55210ce6f89b35910160405180910390a150505050565b6005546001600160a01b0316331461093b5760405162461bcd60e51b81526004016106d090611bb6565b6109456000611241565b565b6002600654141561096a5760405162461bcd60e51b81526004016106d090611beb565b60026006556107f5338383611293565b6060600480546105a990611c92565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610a0b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106d0565b610a183385858403610bda565b5060019392505050565b6000610639338484610cff565b600081610a455750670de0b6b3a7640000919050565b60115482601054610a569190611c5c565b610a609190611c3a565b61059490670de0b6b3a7640000611c22565b6000610a7d60025490565b1580610a8a5750600c5442105b15610a955750600090565b600254610aa06115ef565b610aa86110ee565b610ab29190611c7b565b600954610abf9190611c5c565b610ad190670de0b6b3a7640000611c5c565b610adb9190611c3a565b600f54610ae89190611c22565b905090565b60026006541415610b105760405162461bcd60e51b81526004016106d090611beb565b600260065533600081815260208190526040902054610b2f9190610e45565b610b3833611106565b6001600655565b6005546001600160a01b03163314610b695760405162461bcd60e51b81526004016106d090611bb6565b6001600160a01b038116610bce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d0565b610bd781611241565b50565b6001600160a01b038316610c3c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106d0565b6001600160a01b038216610c9d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106d0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260146020526040902060010154600160401b900467ffffffffffffffff168015610e34576001600160a01b03841660009081526014602052604081208054600190910154909167ffffffffffffffff90911690670de0b6b3a7640000610d776104118487611c7b565b610d819190611c3a565b610d8b9084611c3a565b9050610d978184611c7b565b6001600160a01b038816600090815260146020526040902055610dba8184611c7b565b610de8576001600160a01b038716600090815260146020526040902060010180546001600160801b03191690555b6001600160a01b0386166000908152601460205260409020908155600101805467ffffffffffffffff858116600160401b026001600160801b0319909216931692909217919091179055505b610e3f84848461160b565b50505050565b816000610e50610a72565b600f8190559050610e5f6110ee565b600d556001600160a01b03821615610ea257610e7a8261051d565b6001600160a01b03831660009081526013602090815260408083209390935560129052208190555b60008311610ef25760405162461bcd60e51b815260206004820152601860248201527f4d757374207769746864726177203e203020746f6b656e73000000000000000060448201526064016106d0565b6001600160a01b0384166000908152601460205260409020805460019091015467ffffffffffffffff80821691600160401b900416428110610f6c5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b9cc81cdd1a5b1b081b1bd8dad959606a1b60448201526064016106d0565b6000670de0b6b3a7640000610f846104118585611c7b565b610f8e9089611c5c565b610f989190611c3a565b9050610fa48785611c7b565b6001600160a01b038916600090815260146020526040902055610fc78785611c7b565b610ff5576001600160a01b038816600090815260146020526040902060010180546001600160801b03191690555b610fff88826117d9565b60075460405163a9059cbb60e01b81526001600160a01b038a81166004830152602482018a90529091169063a9059cbb90604401602060405180830381600087803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190611ad5565b6110a15760405162461bcd60e51b81526004016106d090611b87565b876001600160a01b03167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75886040516110dc91815260200190565b60405180910390a25050505050505050565b6000600e544210156110ff57504290565b50600e5490565b6001600160a01b038116600090815260136020526040902054801561123d576001600160a01b0382166000908152601360205260408120819055600b8054839290611152908490611c22565b90915550506008546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401602060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190611ad5565b6111f95760405162461bcd60e51b81526004016106d090611b87565b816001600160a01b03167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe8260405161123491815260200190565b60405180910390a25b5050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82600061129e610a72565b600f81905590506112ad6110ee565b600d556001600160a01b038216156112f0576112c88261051d565b6001600160a01b03831660009081526013602090815260408083209390935560129052208190555b600084116113385760405162461bcd60e51b81526020600482015260156024820152744d757374207374616b65203e203020746f6b656e7360581b60448201526064016106d0565b60115483111561138a5760405162461bcd60e51b815260206004820152601960248201527f4c6f636b2065786365656473206d6178206475726174696f6e0000000000000060448201526064016106d0565b6001600160a01b0385166000908152601460205260409020805460019091015467ffffffffffffffff80821691600160401b9004166113c98282611c7b565b8610156114185760405162461bcd60e51b815260206004820152601860248201527f4d757374206578636565642063757272656e74206c6f636b000000000000000060448201526064016106d0565b600083670de0b6b3a764000061142d89610a2f565b6114378b88611c22565b6114419190611c5c565b61144b9190611c3a565b6114559190611c7b565b90506114618885611c22565b6001600160a01b038a166000908152601460205260409020908155600101805467ffffffffffffffff19164267ffffffffffffffff8116919091179091556114aa908890611c22565b6001600160a01b038a811660008181526014602052604090819020600101805467ffffffffffffffff95909516600160401b026fffffffffffffffff0000000000000000199095169490941790935560075492516323b872dd60e01b81526004810191909152306024820152604481018b90529116906323b872dd90606401602060405180830381600087803b15801561154357600080fd5b505af1158015611557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157b9190611ad5565b6115975760405162461bcd60e51b81526004016106d090611b87565b6115a1898261191f565b886001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d896040516115dc91815260200190565b60405180910390a2505050505050505050565b6000600d54600c5411156116045750600c5490565b50600d5490565b6001600160a01b03831661166f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106d0565b6001600160a01b0382166116d15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106d0565b6001600160a01b038316600090815260208190526040902054818110156117495760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106d0565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611780908490611c22565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117cc91815260200190565b60405180910390a3610e3f565b6001600160a01b0382166118395760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106d0565b6001600160a01b038216600090815260208190526040902054818110156118ad5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106d0565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118dc908490611c7b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610cf2565b6001600160a01b0382166119755760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106d0565b80600260008282546119879190611c22565b90915550506001600160a01b038216600090815260208190526040812080548392906119b4908490611c22565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b0381168114611a1557600080fd5b919050565b600060208284031215611a2c57600080fd5b611a35826119fe565b9392505050565b60008060408385031215611a4f57600080fd5b611a58836119fe565b9150611a66602084016119fe565b90509250929050565b600080600060608486031215611a8457600080fd5b611a8d846119fe565b9250611a9b602085016119fe565b9150604084013590509250925092565b60008060408385031215611abe57600080fd5b611ac7836119fe565b946020939093013593505050565b600060208284031215611ae757600080fd5b81518015158114611a3557600080fd5b600060208284031215611b0957600080fd5b5035919050565b60008060408385031215611b2357600080fd5b50508035926020909101359150565b600060208083528351808285015260005b81811015611b5f57858101830151858201604001528201611b43565b81811115611b71576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260159082015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611c3557611c35611ccd565b500190565b600082611c5757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611c7657611c76611ccd565b500290565b600082821015611c8d57611c8d611ccd565b500390565b600181811c90821680611ca657607f821691505b60208210811415611cc757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea264697066735822122085b331e12ba06f50a268b19f1a8b237e85f4675f122faf42faffea3e6cb997f864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c80637b0a47ee11610130578063cd3daf9d116100b8578063e9fad8ee1161007c578063e9fad8ee14610484578063f2fde38b1461048c578063f8077fae1461049f578063fc0c546a146104a8578063fc7e286d146104bb57600080fd5b8063cd3daf9d1461041f578063d54ad2a114610427578063dd62ed3e1461042f578063df136d6514610468578063e2fdcc171461047157600080fd5b8063a16cdbb1116100ff578063a16cdbb1146103d4578063a457c2d7146103dd578063a9059cbb146103f0578063adf8252d14610403578063c8f33c911461041657600080fd5b80637b0a47ee1461037e5780638b876347146103875780638da5cb5b146103a757806395d89b41146103cc57600080fd5b8063313ce567116101b35780635359b3ea116101825780635359b3ea1461031e57806354c5b6961461033157806370a082311461033a578063715018a6146103635780637b0472f01461036b57600080fd5b8063313ce567146102eb578063386a9525146102fa57806339509351146103035780634e71d92d1461031657600080fd5b806318160ddd116101fa57806318160ddd146102a957806322e9c08d146102b157806323b80449146102ba57806323b872dd146102c35780632e17de78146102d657600080fd5b80628cc2621461022b57806306fdde03146102515780630700037d14610266578063095ea7b314610286575b600080fd5b61023e610239366004611a1a565b61051d565b6040519081526020015b60405180910390f35b61025961059a565b6040516102489190611b32565b61023e610274366004611a1a565b60136020526000908152604090205481565b610299610294366004611aab565b61062c565b6040519015158152602001610248565b60025461023e565b61023e600b5481565b61023e600c5481565b6102996102d1366004611a6f565b610642565b6102e96102e4366004611af7565b6106f1565b005b60405160128152602001610248565b61023e600a5481565b610299610311366004611aab565b61072b565b6102e9610767565b6102e961032c366004611b10565b6107fe565b61023e60105481565b61023e610348366004611a1a565b6001600160a01b031660009081526020819052604090205490565b6102e9610911565b6102e9610379366004611b10565b610947565b61023e60095481565b61023e610395366004611a1a565b60126020526000908152604090205481565b6005546001600160a01b03165b6040516001600160a01b039091168152602001610248565b61025961097a565b61023e60115481565b6102996103eb366004611aab565b610989565b6102996103fe366004611aab565b610a22565b61023e610411366004611af7565b610a2f565b61023e600d5481565b61023e610a72565b600b5461023e565b61023e61043d366004611a3c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61023e600f5481565b6008546103b4906001600160a01b031681565b6102e9610aed565b6102e961049a366004611a1a565b610b3f565b61023e600e5481565b6007546103b4906001600160a01b031681565b6104f76104c9366004611a1a565b6014602052600090815260409020805460019091015467ffffffffffffffff80821691600160401b90041683565b6040805193845267ffffffffffffffff9283166020850152911690820152606001610248565b6001600160a01b0381166000908152601360209081526040808320546012909252822054670de0b6b3a764000090610553610a72565b61055d9190611c7b565b6001600160a01b0385166000908152602081905260409020546105809190611c5c565b61058a9190611c3a565b6105949190611c22565b92915050565b6060600380546105a990611c92565b80601f01602080910402602001604051908101604052809291908181526020018280546105d590611c92565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b6000610639338484610bda565b50600192915050565b600061064f848484610cff565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106d95760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6106e68533858403610bda565b506001949350505050565b600260065414156107145760405162461bcd60e51b81526004016106d090611beb565b60026006556107233382610e45565b506001600655565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610639918590610762908690611c22565b610bda565b6002600654141561078a5760405162461bcd60e51b81526004016106d090611beb565b600260065533600061079a610a72565b600f81905590506107a96110ee565b600d556001600160a01b038216156107ec576107c48261051d565b6001600160a01b03831660009081526013602090815260408083209390935560129052208190555b6107f533611106565b50506001600655565b6005546001600160a01b031633146108285760405162461bcd60e51b81526004016106d090611bb6565b600080610833610a72565b600f81905590506108426110ee565b600d556001600160a01b038216156108855761085d8261051d565b6001600160a01b03831660009081526013602090815260408083209390935560129052208190555b600a8390556108948385611c3a565b60095542600d819055600c5411156108be57600a54600c546108b69190611c22565b600e556108cf565b600a546108cb9042611c22565b600e555b60095460408051918252602082018590527f53ec5ac14ec827c0859f27c3d22f4ea8c29f6d64cbe2f92aeb55210ce6f89b35910160405180910390a150505050565b6005546001600160a01b0316331461093b5760405162461bcd60e51b81526004016106d090611bb6565b6109456000611241565b565b6002600654141561096a5760405162461bcd60e51b81526004016106d090611beb565b60026006556107f5338383611293565b6060600480546105a990611c92565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610a0b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106d0565b610a183385858403610bda565b5060019392505050565b6000610639338484610cff565b600081610a455750670de0b6b3a7640000919050565b60115482601054610a569190611c5c565b610a609190611c3a565b61059490670de0b6b3a7640000611c22565b6000610a7d60025490565b1580610a8a5750600c5442105b15610a955750600090565b600254610aa06115ef565b610aa86110ee565b610ab29190611c7b565b600954610abf9190611c5c565b610ad190670de0b6b3a7640000611c5c565b610adb9190611c3a565b600f54610ae89190611c22565b905090565b60026006541415610b105760405162461bcd60e51b81526004016106d090611beb565b600260065533600081815260208190526040902054610b2f9190610e45565b610b3833611106565b6001600655565b6005546001600160a01b03163314610b695760405162461bcd60e51b81526004016106d090611bb6565b6001600160a01b038116610bce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d0565b610bd781611241565b50565b6001600160a01b038316610c3c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106d0565b6001600160a01b038216610c9d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106d0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260146020526040902060010154600160401b900467ffffffffffffffff168015610e34576001600160a01b03841660009081526014602052604081208054600190910154909167ffffffffffffffff90911690670de0b6b3a7640000610d776104118487611c7b565b610d819190611c3a565b610d8b9084611c3a565b9050610d978184611c7b565b6001600160a01b038816600090815260146020526040902055610dba8184611c7b565b610de8576001600160a01b038716600090815260146020526040902060010180546001600160801b03191690555b6001600160a01b0386166000908152601460205260409020908155600101805467ffffffffffffffff858116600160401b026001600160801b0319909216931692909217919091179055505b610e3f84848461160b565b50505050565b816000610e50610a72565b600f8190559050610e5f6110ee565b600d556001600160a01b03821615610ea257610e7a8261051d565b6001600160a01b03831660009081526013602090815260408083209390935560129052208190555b60008311610ef25760405162461bcd60e51b815260206004820152601860248201527f4d757374207769746864726177203e203020746f6b656e73000000000000000060448201526064016106d0565b6001600160a01b0384166000908152601460205260409020805460019091015467ffffffffffffffff80821691600160401b900416428110610f6c5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b9cc81cdd1a5b1b081b1bd8dad959606a1b60448201526064016106d0565b6000670de0b6b3a7640000610f846104118585611c7b565b610f8e9089611c5c565b610f989190611c3a565b9050610fa48785611c7b565b6001600160a01b038916600090815260146020526040902055610fc78785611c7b565b610ff5576001600160a01b038816600090815260146020526040902060010180546001600160801b03191690555b610fff88826117d9565b60075460405163a9059cbb60e01b81526001600160a01b038a81166004830152602482018a90529091169063a9059cbb90604401602060405180830381600087803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190611ad5565b6110a15760405162461bcd60e51b81526004016106d090611b87565b876001600160a01b03167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75886040516110dc91815260200190565b60405180910390a25050505050505050565b6000600e544210156110ff57504290565b50600e5490565b6001600160a01b038116600090815260136020526040902054801561123d576001600160a01b0382166000908152601360205260408120819055600b8054839290611152908490611c22565b90915550506008546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401602060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190611ad5565b6111f95760405162461bcd60e51b81526004016106d090611b87565b816001600160a01b03167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe8260405161123491815260200190565b60405180910390a25b5050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82600061129e610a72565b600f81905590506112ad6110ee565b600d556001600160a01b038216156112f0576112c88261051d565b6001600160a01b03831660009081526013602090815260408083209390935560129052208190555b600084116113385760405162461bcd60e51b81526020600482015260156024820152744d757374207374616b65203e203020746f6b656e7360581b60448201526064016106d0565b60115483111561138a5760405162461bcd60e51b815260206004820152601960248201527f4c6f636b2065786365656473206d6178206475726174696f6e0000000000000060448201526064016106d0565b6001600160a01b0385166000908152601460205260409020805460019091015467ffffffffffffffff80821691600160401b9004166113c98282611c7b565b8610156114185760405162461bcd60e51b815260206004820152601860248201527f4d757374206578636565642063757272656e74206c6f636b000000000000000060448201526064016106d0565b600083670de0b6b3a764000061142d89610a2f565b6114378b88611c22565b6114419190611c5c565b61144b9190611c3a565b6114559190611c7b565b90506114618885611c22565b6001600160a01b038a166000908152601460205260409020908155600101805467ffffffffffffffff19164267ffffffffffffffff8116919091179091556114aa908890611c22565b6001600160a01b038a811660008181526014602052604090819020600101805467ffffffffffffffff95909516600160401b026fffffffffffffffff0000000000000000199095169490941790935560075492516323b872dd60e01b81526004810191909152306024820152604481018b90529116906323b872dd90606401602060405180830381600087803b15801561154357600080fd5b505af1158015611557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157b9190611ad5565b6115975760405162461bcd60e51b81526004016106d090611b87565b6115a1898261191f565b886001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d896040516115dc91815260200190565b60405180910390a2505050505050505050565b6000600d54600c5411156116045750600c5490565b50600d5490565b6001600160a01b03831661166f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106d0565b6001600160a01b0382166116d15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106d0565b6001600160a01b038316600090815260208190526040902054818110156117495760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106d0565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611780908490611c22565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117cc91815260200190565b60405180910390a3610e3f565b6001600160a01b0382166118395760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106d0565b6001600160a01b038216600090815260208190526040902054818110156118ad5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106d0565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118dc908490611c7b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610cf2565b6001600160a01b0382166119755760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106d0565b80600260008282546119879190611c22565b90915550506001600160a01b038216600090815260208190526040812080548392906119b4908490611c22565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b0381168114611a1557600080fd5b919050565b600060208284031215611a2c57600080fd5b611a35826119fe565b9392505050565b60008060408385031215611a4f57600080fd5b611a58836119fe565b9150611a66602084016119fe565b90509250929050565b600080600060608486031215611a8457600080fd5b611a8d846119fe565b9250611a9b602085016119fe565b9150604084013590509250925092565b60008060408385031215611abe57600080fd5b611ac7836119fe565b946020939093013593505050565b600060208284031215611ae757600080fd5b81518015158114611a3557600080fd5b600060208284031215611b0957600080fd5b5035919050565b60008060408385031215611b2357600080fd5b50508035926020909101359150565b600060208083528351808285015260005b81811015611b5f57858101830151858201604001528201611b43565b81811115611b71576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260159082015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611c3557611c35611ccd565b500190565b600082611c5757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611c7657611c76611ccd565b500290565b600082821015611c8d57611c8d611ccd565b500390565b600181811c90821680611ca657607f821691505b60208210811415611cc757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea264697066735822122085b331e12ba06f50a268b19f1a8b237e85f4675f122faf42faffea3e6cb997f864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 159,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 165,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 167,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2062,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "token",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)767"
      },
      {
        "astId": 2065,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "escrow",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IEscrow)2886"
      },
      {
        "astId": 2068,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2071,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2073,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "claimedRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2075,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "startRewardsTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2077,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2079,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2081,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2083,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "maxBonus",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2085,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "maxLockDuration",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2089,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2093,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "rewards",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2098,
        "contract": "contracts/OhStaking.sol:OhStaking",
        "label": "deposits",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(Deposit)2105_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)767": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrow)2886": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Deposit)2105_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OhStaking.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)2105_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Deposit)2105_storage": {
        "encoding": "inplace",
        "label": "struct OhStaking.Deposit",
        "members": [
          {
            "astId": 2100,
            "contract": "contracts/OhStaking.sol:OhStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2102,
            "contract": "contracts/OhStaking.sol:OhStaking",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2104,
            "contract": "contracts/OhStaking.sol:OhStaking",
            "label": "end",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}